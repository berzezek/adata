import pandas as pd
import requests
import time
import json
import os
from concurrent.futures import ThreadPoolExecutor, as_completed
from threading import Lock

# –¢–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
tokenAuth = "QSG49tlkZgFpxsdJVjCPTYuq09xFuPye"

# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–æ 30)
total_threads = 15

# –ò–Ω–¥–µ–∫—Å, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
resume_index = 6230

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
lock = Lock()


def save_data(iin, response_json):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ response.json, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω–µ—Ü.
    """
    filename = "response.json"

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    with lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if os.path.exists(filename):
            with open(filename, "r", encoding="utf-8") as f:
                try:
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
                    data = json.load(f)
                    if not isinstance(data, list):
                        data = []
                except (json.JSONDecodeError, ValueError):
                    # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
                    data = []
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
            data = []

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ iin
        if not any(item["iin"] == iin for item in data):
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫
            data.append({"iin": iin, "data": response_json})

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
            with open(filename, "w", encoding="utf-8") as f:
                json.dump(data, f, ensure_ascii=False, indent=4)

            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–ª—è bin: {iin}")
        else:
            print(f"‚ö°Ô∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è bin {iin} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü—Ä–æ–ø—É—Å–∫...")


def load_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ data.xlsx.
    """
    df = pd.read_excel("data.xlsx")
    return df


def get_bin_array(df):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö bin.
    """
    bins = df["bin"].unique()
    return bins


def fetch_data(iinBin):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–¥–Ω–æ–≥–æ bin.
    """
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
        response = requests.get(
            f"https://api.adata.kz/api/company/info/{tokenAuth}?iinBin={iinBin}"
        )

        token = response.json().get("token")
        if not token:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–ª—è bin: {iinBin}")
            return None

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        attempts = 0
        while attempts < 10:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ {attempts + 1} –¥–ª—è bin: {iinBin}")
            check_response = requests.get(
                f"https://api.adata.kz/api/company/info/check/{tokenAuth}?token={token}"
            )

            check_data = check_response.json()
            if check_data.get("message") == "wait":
                time.sleep(15)  # –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                attempts += 1
                continue
            else:
                # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if "data" in check_data and check_data["data"] is not None:
                    save_data(iinBin, check_data["data"])
                    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è bin: {iinBin}")
                    return check_data["data"]

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞
                break

        print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–ª—è bin: {iinBin} –ø–æ—Å–ª–µ {attempts} –ø–æ–ø—ã—Ç–æ–∫.")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ bin {iinBin}: {e}")
        return None


def process_batch(bins, start, total_threads, resume_index=6230):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —à–∞–≥–æ–º total_threads, –Ω–∞—á–∏–Ω–∞—è —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ (resume_index).
    """
    count = 0
    for i in range(start, len(bins), total_threads):
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if i < resume_index:
            continue

        iinBin = bins[i]
        data = fetch_data(iinBin)
        if data:
            count += 1

    print(f"‚úÖ –ü–æ—Ç–æ–∫ {start + 1} –∑–∞–≤–µ—Ä—à–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É {count} –∑–∞–ø–∏—Å–µ–π.")


def get_data(bins):
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ 15 –ø–æ—Ç–æ–∫–∞—Ö —Å —à–∞–≥–æ–º.
    """
    with ThreadPoolExecutor(max_workers=total_threads) as executor:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞, –Ω–∞—á–∏–Ω–∞—è —Å 0 –¥–æ total_threads
        futures = [executor.submit(process_batch, bins, start, total_threads, resume_index) for start in range(total_threads)]

        # –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for future in as_completed(futures):
            try:
                future.result()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ –ø–æ—Ç–æ–∫–æ–≤: {e}")

    print(f"üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º {total_threads} –ø–æ—Ç–æ–∫–æ–≤.")


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞.
    """
    df = load_data()
    bins = get_bin_array(df)
    get_data(bins)


if __name__ == "__main__":
    main()
