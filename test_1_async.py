import pandas as pd
import requests
import json
import os
from dotenv import load_dotenv
import urllib3
import time

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

load_dotenv()

api_endpoints = {
    "info": "api/company/info/",
    "profit": "api/company/profit/",
    "tax": "api/company/tax/",
    "estimated-wage-fund": "api/company/estimated-wage-fund/",
    "tax-deduction_kbk": "api/company/tax-deduction/kbk/",
    "tax-deduction_extended": "api/company/tax-deduction/extended/",
    "tax-deduction_dynamics": "api/company/tax-deduction/dynamics/",
    "rating": "api/company/rating/",
    "market-dynamics": "api/company/market-dynamics/",
    "contract_status": "api/company/contract/status/",
}

proxy_url = os.getenv("HTTPS_PROXY")
base_url = "https://api.adata.kz/"
API_TOKEN = os.getenv("API_TOKEN")
batch_size = int(os.getenv("BATCH_SIZE"))
ERROR_LOG_FILE = "error_log.json"

df = pd.read_excel("data.xlsx")
# print(df, df.shape)

exclude = pd.read_csv("exclude.csv", dtype={"bin": str})
# print(exclude, exclude.shape)

df = df[~df['bin'].isin(exclude['bin'])]
# print(df, df.shape)


def send_request(api_name, api_endpoint, bin, retries=3, delay=30):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç GET-–∑–∞–ø—Ä–æ—Å –∫ API —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    url = f"{base_url}{api_endpoint}{API_TOKEN}?iinBin={bin}"
    
    for attempt in range(retries):
        try:
            response = requests.get(url, proxies={"https": proxy_url}, verify=False, timeout=30)
            if response.status_code == 200:
                data = response.json()
                if data.get("success") and "token" in data:
                    token = data["token"]
                    return {"bin": bin, "endpoint": api_name, "token": token}
                else:
                    return {"error": f"Success response received, but no token found for BIN {bin}"}
            elif response.status_code == 404:
                return {"bin": bin, "endpoint": api_name, "token": None, "status": "not_found"}
            # elif response.status_code in (500, 504):
            else:
                log_error({"bin": bin, "endpoint": api_name, "status": response.status_code, "error": "Server error or timeout"})
                print(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}: –°–µ—Ä–≤–µ—Ä –≤–µ—Ä–Ω—É–ª {response.status_code} (BIN {bin})")
            # else:
            #     return {"error": f"Request failed with status {response.status_code}"}
        except requests.exceptions.Timeout:
            log_error({"bin": bin, "endpoint": api_name, "error": "Timeout error"})
            print(f"‚è≥ –¢–∞–π–º-–∞—É—Ç –¥–ª—è BIN {bin}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}...")
        except requests.exceptions.RequestException as e:
            log_error({"bin": bin, "endpoint": api_name, "error": f"Client error: {e}"})
            print(f"‚ö†Ô∏è –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retries}...")

        if attempt < retries - 1:  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            print(f"üîÑ –û–∂–∏–¥–∞–Ω–∏–µ {delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
            time.sleep(delay)
    
    return {"bin": bin, "endpoint": api_name, "error": "Failed after retries"}

def process_batches(start_index, end_index):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –ø–∞–∫–µ—Ç–∞–º–∏ –ø–æ batch_size"""
    responses = []
    processed_bins = 0

    try:
        bins = df['bin'][start_index:end_index].tolist()

        for i in range(0, len(bins), batch_size):
            start_time = time.monotonic()

            batch = bins[i:i + batch_size]  # –í—ã–±–∏—Ä–∞–µ–º 100 BIN-–æ–≤

            for bin_value in batch:
                for key, value in api_endpoints.items():
                    response = send_request(key, value, bin_value)
                    responses.append(response)

                    # –û–∂–∏–¥–∞–Ω–∏–µ –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                    # time.sleep(1)

                processed_bins += 1
            print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {processed_bins}/{len(bins)} BIN-–æ–≤")

            elapsed_time = time.monotonic() - start_time  # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞—Ç—á–∞

            # –ï—Å–ª–∏ –±–∞—Ç—á –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±—ã—Å—Ç—Ä–µ–µ 60 —Å–µ–∫—É–Ω–¥, –∂–¥–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
            if elapsed_time < 60:
                remaining_time = 60 - elapsed_time
                print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {remaining_time:.2f} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –±–∞—Ç—á–∞...")
                time.sleep(remaining_time)

    except Exception as e:
        print(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        print("üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏...")
        save_responses_to_file(responses)
        print("\n‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã!")

def save_responses_to_file(response_list, filename="response_tokens.json"):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª"""
    try:
        with open(filename, "r", encoding="utf-8") as file:
            existing_data = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        existing_data = []

    existing_data.extend(response_list)

    with open(filename, "w", encoding="utf-8") as file:
        json.dump(existing_data, file, ensure_ascii=False, indent=4)

def log_error(error_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª"""
    try:
        with open(ERROR_LOG_FILE, "r", encoding="utf-8") as file:
            existing_errors = json.load(file)
    except (FileNotFoundError, json.JSONDecodeError):
        existing_errors = []

    existing_errors.append(error_data)

    with open(ERROR_LOG_FILE, "w", encoding="utf-8") as file:
        json.dump(existing_errors, file, ensure_ascii=False, indent=4)

def get_tokens(start_index, end_index):
    process_batches(start_index, end_index)

if __name__ == "__main__":
    start_index = int(input("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å BIN: "))
    end_index = int(input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å BIN: "))
    get_tokens(start_index, end_index)
